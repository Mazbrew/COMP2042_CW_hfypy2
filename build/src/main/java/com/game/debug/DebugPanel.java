package com.game.debug;

import javax.swing.*;
import javax.swing.event.ChangeListener;

import com.game.controller.GameController;

import java.awt.*;
import java.awt.event.ActionListener;


/**
 *  The DebugPanel class defines the properties of the DebugPanel JPanel.
 *  <p>
 *  Said panel is added to the DebugConsole JDialog.
 */
public class DebugPanel extends JPanel {
    private JButton skipLevel;
    private JButton resetBalls;

    private JSlider ballXSpeed;
    private JSlider ballYSpeed;

    public DebugPanel(GameController wall){

        this.setLayout(new GridLayout(2,2));

        skipLevel = makeButton("Skip Level",e -> wall.nextLevel());
        resetBalls = makeButton("Reset Balls",e -> wall.resetBallCount());

        ballXSpeed = makeSlider(-5,5,e -> wall.setBallXSpeed(ballXSpeed.getValue()));
        ballYSpeed = makeSlider(-5,5,e -> wall.setBallYSpeed(ballYSpeed.getValue()));

        this.add(skipLevel);
        this.add(resetBalls);

        this.add(ballXSpeed);
        this.add(ballYSpeed);

    }
    
    /** 
     * Method that makes a newJBbutton given some parameters.
     * 
     * @param title The string that is displayed on to the button.
     * @param e The parameter that detects when the button is pressed.
     * @return Returns the button generated by this method.
     */
    private JButton makeButton(String title, ActionListener e){
        JButton out = new JButton(title);
        out.addActionListener(e);
        return  out;
    }

    
    /** 
     * Method that makes a new JSlider given some parameters.
     * 
     * @param min The minimum value of the slider.
     * @param max The maximum value of the slider. 
     * @param e The parameter that detects when the slider is interacted with.
     * @return Returns the slider generated by this method.
     */
    private JSlider makeSlider(int min, int max, ChangeListener e){
        JSlider out = new JSlider(min,max);
        out.setMajorTickSpacing(1);
        out.setSnapToTicks(true);
        out.setPaintTicks(true);
        out.addChangeListener(e);
        return out;
    }

    
    /** 
     * Method that changes the X and Y axis speed of the ball according to the
     * value of the JSliser.
     * 
     * @param x The X axis speed specified by the JSlider.
     * @param y The Y axis speed specified by the JSlider.
     */
    public void setValues(int x,int y){
        ballXSpeed.setValue(x);
        ballYSpeed.setValue(y);
    }

}
